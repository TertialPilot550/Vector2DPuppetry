
So the vector puppetry will be structured as as follows


Nodes and connections (optionally directional, locked, other relationships to set a base for movement)
	
	Each 'puppet', with a variety of components, is called an Entity. An entity has a root node which defined it's location. It is allowed to have
	an unlimited amount of connections to other nodes which can contains some data element. Valid data elements defined below.


	Should entities be able to have relationships with other entities? Yes, I want to be able to constrain anything I like if possible


	Each entity has a root node, and a 2x2 matrix that represents it's orientation, which should be initialized to the identity matrix .  initially. This is how rotation is handled for whole entities.
	
	
	The render software will render each top-level entity, drawing an absolute starting location from the entities location Vector.

	Then, for each connection, it will apply the orientation matrix to the connection's direction vectors. The result will be the actual 
	direction vector that should be used to place the root of the connected component. The punchline is that pure rotation doesn't change spatial relationships.
	scaling and squishing can also be done with the orientation matrix, and don't change spatial relationships.

	Translations can be done by simple adding a vector to the entities location vector.

	Vector software assumes that entities only need to be rotated, scaled, squished, and translated. 

		Each entity has 
			An ID
			Location Vector, specifies it's root location on the screen
			2x2 Orientation Matrix, specifies its manifestation orientation.

			A List of connections to subcomponents. A subcomponent is a component that is not an entity. Entities can contain entities. subcomponents can be animated.
			A connection has a direction, and something that implements the required stuff for a visual component in the animation context.

			Entities can also be animated. The entitity object has a list of defined animations 

			What is considered part of the identity of the entity? The actual connection vectors values are not considered part of the identity, because we are assuming that those can be changed by the animation. But, there should be a default state defined
			Animations will be designed in the entity creator, so don't need to be done directly in this software. The way it will work, there will be an ordered list of copies of the entity with different connection vector values

			Since all this information is created and stored seperately from the actuall animation software, this is another thing I need to be aware of for the project.
			Should maybe be sooner in the process that I tackle this rather than waiting until I hvae everything else done. I want to be able to test things reasonably.


A session can add any entity or background from the EntityLibrary or BackgroundLibrary directions
	- Any session opened in a project has access to all of the project's resources.
	- These libraries should be visible on the screen with an easy way to add them to the active entities list
	- the active entities and active backgrounds are the entities and backgrounds that are actually written on the screen 
	  and visible.

project_folder
	|
	work_directory
		| - EntityLibrary
				| - CharactersLibrary
				| - ObjectLibrary
				| - SceneLibrary (groups of objects)
		| - Images (including backgrounds and visual assets for entities)
				| - Backgrounds
				| - Assets
		| - Sessions 
			| - Session1
				| - ActiveComponents
				| - DependantComponents
				| - OutputFiles


VECTOR SOFTWARE, where you can add predefined entities and backgrounds. Backgrounds will just be treated as backgrounds again. any necessary set objects will just be implemeneted as entities.
	- Render and manipulate the entities, easily add and remove them from the current screen
	- Save 'scenes' which contains a set of entities and backgrounds, with some default location for the entities. 
	- Save 'sessions', as a set of already saved frames and the current locations of active entities to allow doing a scene across multiple sessions
	- Capture will be done frame by frame, named by the current amount of files, combined into a video using a function within the application.
	- There should be a library of entities, and an instnce of the entity can be added to the program, manipulated, and changed.
		- So there is a visible list of imported entities, which is stored in a EntityLibrary Directory in the work directory
	- Should also be able to view the output directory and delete/undo saves

ENTITY BUILDER SOFTWARE, where you can combine images to create an entity object

Use Json to store and load entities from files

Features of the applications:
	- Run a new or existing session. Manipulate and render active entities and backgrounds
	- Create entities using some sub activitiy where components can be added and configured
	- adding backgrounds or entities can be done by simply adding them to the project directory.
	- Turn an output directory into a video, so that scenes can be turned into videos with evenly spaced frames. Any variance in timing should be done in the editing process.


For now, each entity is completely defined by:
	- affine transform related orientation variables
	- visual Assets
	- child components/connections
	- animation files

Entity File:
each line will be annoted starting with a tag indicating the intended meaning of the line
to process, scan each line and handle each case

Start File
""
transform [3, 3, 3, 3, 3, 3]
image onion.png

""
EOF